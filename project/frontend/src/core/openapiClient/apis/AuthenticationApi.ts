/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Tutorial
 * OpenAPI Tutorial by halhorn
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface AuthenticationLoginPostRequest {
    inlineObject1: InlineObject1;
}

/**
 * AuthenticationApi - interface
 * 
 * @export
 * @interface AuthenticationApiInterface
 */
export interface AuthenticationApiInterface {
    /**
     * 詳細内容
     * @summary ログイン
     * @param {InlineObject1} inlineObject1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authenticationLoginPostRaw(requestParameters: AuthenticationLoginPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>>;

    /**
     * 詳細内容
     * ログイン
     */
    authenticationLoginPost(requestParameters: AuthenticationLoginPostRequest, initOverrides?: RequestInit): Promise<User>;

    /**
     * 詳細内容
     * @summary ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authenticationLogoutPostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     * 詳細内容
     * ログアウト
     */
    authenticationLogoutPost(initOverrides?: RequestInit): Promise<void>;

    /**
     * 詳細内容
     * @summary ログイン済のユーザー情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authenticationMeGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>>;

    /**
     * 詳細内容
     * ログイン済のユーザー情報を取得
     */
    authenticationMeGet(initOverrides?: RequestInit): Promise<User>;

}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI implements AuthenticationApiInterface {

    /**
     * 詳細内容
     * ログイン
     */
    async authenticationLoginPostRaw(requestParameters: AuthenticationLoginPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.inlineObject1 === null || requestParameters.inlineObject1 === undefined) {
            throw new runtime.RequiredError('inlineObject1','Required parameter requestParameters.inlineObject1 was null or undefined when calling authenticationLoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/authentication/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.inlineObject1),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * 詳細内容
     * ログイン
     */
    async authenticationLoginPost(requestParameters: AuthenticationLoginPostRequest, initOverrides?: RequestInit): Promise<User> {
        const response = await this.authenticationLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 詳細内容
     * ログアウト
     */
    async authenticationLogoutPostRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authentication/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 詳細内容
     * ログアウト
     */
    async authenticationLogoutPost(initOverrides?: RequestInit): Promise<void> {
        await this.authenticationLogoutPostRaw(initOverrides);
    }

    /**
     * 詳細内容
     * ログイン済のユーザー情報を取得
     */
    async authenticationMeGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/authentication/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * 詳細内容
     * ログイン済のユーザー情報を取得
     */
    async authenticationMeGet(initOverrides?: RequestInit): Promise<User> {
        const response = await this.authenticationMeGetRaw(initOverrides);
        return await response.value();
    }

}
