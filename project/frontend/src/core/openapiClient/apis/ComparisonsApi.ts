/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Tutorial
 * OpenAPI Tutorial by halhorn
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    VideoComparison,
    VideoComparisonFromJSON,
    VideoComparisonToJSON,
} from '../models';

export interface ComparisonsComparisonIdDeleteRequest {
    comparisonId: number;
}

export interface ComparisonsComparisonIdGetRequest {
    comparisonId: number;
}

export interface ComparisonsComparisonIdPublishPutRequest {
    comparisonId: number;
}

export interface ComparisonsPostRequest {
    videoComparison: VideoComparison;
}

/**
 * ComparisonsApi - interface
 * 
 * @export
 * @interface ComparisonsApiInterface
 */
export interface ComparisonsApiInterface {
    /**
     * 詳細内容
     * @summary 比較情報を削除
     * @param {number} comparisonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComparisonsApiInterface
     */
    comparisonsComparisonIdDeleteRaw(requestParameters: ComparisonsComparisonIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     * 詳細内容
     * 比較情報を削除
     */
    comparisonsComparisonIdDelete(requestParameters: ComparisonsComparisonIdDeleteRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 詳細内容
     * @summary 比較情報を取得
     * @param {number} comparisonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComparisonsApiInterface
     */
    comparisonsComparisonIdGetRaw(requestParameters: ComparisonsComparisonIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VideoComparison>>;

    /**
     * 詳細内容
     * 比較情報を取得
     */
    comparisonsComparisonIdGet(requestParameters: ComparisonsComparisonIdGetRequest, initOverrides?: RequestInit): Promise<VideoComparison>;

    /**
     * 詳細内容
     * @summary 比較情報を公開状態にする
     * @param {number} comparisonId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComparisonsApiInterface
     */
    comparisonsComparisonIdPublishPutRaw(requestParameters: ComparisonsComparisonIdPublishPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>>;

    /**
     * 詳細内容
     * 比較情報を公開状態にする
     */
    comparisonsComparisonIdPublishPut(requestParameters: ComparisonsComparisonIdPublishPutRequest, initOverrides?: RequestInit): Promise<void>;

    /**
     * 詳細内容
     * @summary 比較情報一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComparisonsApiInterface
     */
    comparisonsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<InlineResponse200>>>;

    /**
     * 詳細内容
     * 比較情報一覧を取得
     */
    comparisonsGet(initOverrides?: RequestInit): Promise<Array<InlineResponse200>>;

    /**
     * 詳細内容
     * @summary 比較情報を登録
     * @param {VideoComparison} videoComparison 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ComparisonsApiInterface
     */
    comparisonsPostRaw(requestParameters: ComparisonsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>>;

    /**
     * 詳細内容
     * 比較情報を登録
     */
    comparisonsPost(requestParameters: ComparisonsPostRequest, initOverrides?: RequestInit): Promise<InlineResponse2001>;

}

/**
 * 
 */
export class ComparisonsApi extends runtime.BaseAPI implements ComparisonsApiInterface {

    /**
     * 詳細内容
     * 比較情報を削除
     */
    async comparisonsComparisonIdDeleteRaw(requestParameters: ComparisonsComparisonIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.comparisonId === null || requestParameters.comparisonId === undefined) {
            throw new runtime.RequiredError('comparisonId','Required parameter requestParameters.comparisonId was null or undefined when calling comparisonsComparisonIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comparisons/{comparisonId}`.replace(`{${"comparisonId"}}`, encodeURIComponent(String(requestParameters.comparisonId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 詳細内容
     * 比較情報を削除
     */
    async comparisonsComparisonIdDelete(requestParameters: ComparisonsComparisonIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.comparisonsComparisonIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * 詳細内容
     * 比較情報を取得
     */
    async comparisonsComparisonIdGetRaw(requestParameters: ComparisonsComparisonIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VideoComparison>> {
        if (requestParameters.comparisonId === null || requestParameters.comparisonId === undefined) {
            throw new runtime.RequiredError('comparisonId','Required parameter requestParameters.comparisonId was null or undefined when calling comparisonsComparisonIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comparisons/{comparisonId}`.replace(`{${"comparisonId"}}`, encodeURIComponent(String(requestParameters.comparisonId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoComparisonFromJSON(jsonValue));
    }

    /**
     * 詳細内容
     * 比較情報を取得
     */
    async comparisonsComparisonIdGet(requestParameters: ComparisonsComparisonIdGetRequest, initOverrides?: RequestInit): Promise<VideoComparison> {
        const response = await this.comparisonsComparisonIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 詳細内容
     * 比較情報を公開状態にする
     */
    async comparisonsComparisonIdPublishPutRaw(requestParameters: ComparisonsComparisonIdPublishPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.comparisonId === null || requestParameters.comparisonId === undefined) {
            throw new runtime.RequiredError('comparisonId','Required parameter requestParameters.comparisonId was null or undefined when calling comparisonsComparisonIdPublishPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comparisons/{comparisonId}/publish`.replace(`{${"comparisonId"}}`, encodeURIComponent(String(requestParameters.comparisonId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 詳細内容
     * 比較情報を公開状態にする
     */
    async comparisonsComparisonIdPublishPut(requestParameters: ComparisonsComparisonIdPublishPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.comparisonsComparisonIdPublishPutRaw(requestParameters, initOverrides);
    }

    /**
     * 詳細内容
     * 比較情報一覧を取得
     */
    async comparisonsGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<InlineResponse200>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/comparisons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InlineResponse200FromJSON));
    }

    /**
     * 詳細内容
     * 比較情報一覧を取得
     */
    async comparisonsGet(initOverrides?: RequestInit): Promise<Array<InlineResponse200>> {
        const response = await this.comparisonsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * 詳細内容
     * 比較情報を登録
     */
    async comparisonsPostRaw(requestParameters: ComparisonsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.videoComparison === null || requestParameters.videoComparison === undefined) {
            throw new runtime.RequiredError('videoComparison','Required parameter requestParameters.videoComparison was null or undefined when calling comparisonsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/comparisons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VideoComparisonToJSON(requestParameters.videoComparison),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * 詳細内容
     * 比較情報を登録
     */
    async comparisonsPost(requestParameters: ComparisonsPostRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.comparisonsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
